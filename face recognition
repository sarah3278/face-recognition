{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2ef155e-235b-4ca9-8a20-5ca5e7f4b097",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the necessary packages\n",
    "import cv2 as cv\n",
    "import face_recognition\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "known_image = face_recognition.load_image_file(\"4,.jpg\")\n",
    "known_faces = face_recognition.face_encodings(face_image = known_image,\n",
    "\t\t\t\t\t\t\t\t\t\t\tnum_jitters=50,\n",
    "\t\t\t\t\t\t\t\t\t\t\tmodel='large')\n",
    "\n",
    "# Lanch the live camera\n",
    "cam = cv.VideoCapture(0)\n",
    "#Check camera\n",
    "if not cam.isOpened():\n",
    "\tprint(\"Camera not working\")\n",
    "\texit()\n",
    "\t\n",
    "# when camera is opened\n",
    "while True:\n",
    "\t\n",
    "\t# campture the image frame-by-frame\n",
    "\tret, frame = cam.read()\n",
    "\t\n",
    "\t# check frame is reading or not\n",
    "\tif not ret:\n",
    "\t\tprint(\"Can't receive the frame\")\n",
    "\t\tbreak\n",
    "\n",
    "\t# Face detection in the frame\n",
    "\tface_locations = face_recognition.face_locations(frame)\n",
    "\n",
    "\tfor face_location in face_locations:\n",
    "\t\ttop, right, bottom, left = face_location\n",
    "\t\t# Draw a rectangle with blue line borders of thickness of 2 px\n",
    "\t\tframe = cv.rectangle(frame, (right,top), (left,bottom), color = (0,0, 255), thickness=2)\n",
    "\t# Check the each faces location in each frame\n",
    "\ttry:\n",
    "\t\t# Frame encoding\n",
    "\t\tLive_face_encoding = face_recognition.face_encodings(face_image = frame,\n",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnum_jitters=23,\n",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel='large')[0]\n",
    "\n",
    "\t\t# Match with the known faces\n",
    "\t\tresults = face_recognition.compare_faces([known_faces], Live_face_encoding)\n",
    "\n",
    "\t\tif results:\n",
    "\t\t\timg = cv.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "\t\t\timg = cv.putText(img, 'PawanKrgunjan', (30, 55), cv.FONT_HERSHEY_SIMPLEX, 1,\n",
    "\t\t\t\t\t(255,0,0), 2, cv.LINE_AA)\n",
    "\t\t\tprint('sarah Enter....')\n",
    "\t\t\tplt.imshow(img)\n",
    "\t\t\tplt.show()\n",
    "\t\t\tbreak\n",
    "\texcept:\n",
    "\t\timg = cv.putText(frame, 'Not sarah', (30, 55), cv.FONT_HERSHEY_SIMPLEX, 1,\n",
    "\t\t\t\t(255,0,0), 2, cv.LINE_AA)\n",
    "\t\t# Display the resulting frame\n",
    "\t\tcv.imshow('frame', img)\n",
    "\t\t# End the streaming\n",
    "\t\tif cv.waitKey(1) == ord('q'):\n",
    "\t\t\tbreak\n",
    "\t\n",
    "\n",
    "# Release the capture\n",
    "cam.release()\n",
    "cv.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3d6ab6b-3bbf-467c-ba52-51b0c5619d76",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e18f8dd-bede-4bc2-8a84-942abb61f71b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
